<?php
declare(strict_types=1);

/**
 * @todo save time of generated files
 * @todo mode force
 * @todo base run only not existed or changed change-date of files
 * @todo create and commit PhpStorm watcher with run it, add info about this to readme
 * @todo desc about this in readme
 *
 * Created by PhpStorm.
 * User: danchukas
 * Date: 2018-03-24 18:24
 */

$project_dir = \dirname(__DIR__, 1);

require_once $project_dir . '/vendor/autoload.php';

$dir = $project_dir . '/src/Lib';

$m = \scandir($dir, SCANDIR_SORT_ASCENDING);
$m = \array_slice($m, 2);

$file_dest = $project_dir . '/src/ILib.php';

$body = [];

foreach ($m as $filename) {


    $class = \basename($filename, '.php');
    $method = $class = lcfirst($class);

    $r = new \ReflectionMethod(\ALib::class, 'getClassName');
    $r->setAccessible(true);
    $class = $r->invoke(new \Lib(), $method);

    $func = new \ReflectionMethod($class, 'run');
    $source = \file($dir . '/' . $filename);
    $declare = $source[$func->getStartLine() - 1]; // it's actually - 1, otherwise you wont get the function() block

    $declare = \trim($declare);

    $pattern = '/^\s*(?:public\s+)?function\s+run/i';
    $declare = \preg_replace($pattern, $method, $declare);

    $pattern = '/^(.+)\s*:\s*([\w\\\\]+)\s*$/';
    $declare = \preg_replace($pattern, '${2} ${1}', $declare);


    $declare = " * @method $declare {
 *  @see $class::run
 * }";

    $body[] = /*$php_doc . PHP_EOL .*/
        $declare;
}


$body = implode(PHP_EOL . ' *' . PHP_EOL, $body);

$this_file = str_replace($project_dir . DIRECTORY_SEPARATOR, '', __FILE__);

$body = "<?php
declare(strict_types=1);


/**
 * Class ILib
 * 
 * Generated by $this_file automatically.
 * ============ WARNING ==================== 
 * = Not edit manual !                     =
 * = If you want change something          =
 * = create new class and inherit by this. = 
 * =========================================
 *
$body
 */
interface ILib
{ 

}
";

file_put_contents($file_dest, $body);

